<head>
    <style>
        .dashboard {
            /*background-image: url(../../../img/bg.jpg);*/
            background-repeat: no-repeat;
            background-size: cover;
            min-height: 40rem;
            padding-top: 1rem;
            width: 100%;
            height: 100%;
            background-position: center center;
            background-attachment: fixed;
            display: block;
            margin-left: auto;
            margin-right: auto;
            width: 100%;
        }
        .log {
           /* background: rgba(0,.0,.0,.6);*/
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 30px rgba(0, .0, .0, .0.568);
            /*color: white;*/

        }

        .img-log {
            display: block;
            margin-left: auto;
            margin-right: auto;
            width: 80%;

        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">

</head>

<body>
      <div class="form-group row">
          <div class="col-md-2 col-sm-2">
                  <div class="x_panel">
                    <div class="x_title">
                            <h2>Información de Bitácora </h2>
                        <div class="clearfix"></div>
                        </div>
                        <div class="x_content">
                            <div class="form-group row">
                                 <label class="col-form-label col-md-7 col-sm-7 label-align">Mes Anterior :</label>
                                 <label class="col-form-label col-md-4">{{infoHoras.mesAnterior}} hrs.</label>
                            </div>
                            <div class="form-group row">
                                 <label class="col-form-label col-md-7 col-sm-7 label-align">Mes Actual :</label>
                                 <label class="col-form-label col-md-4">{{infoHoras.mesActual}} hrs.</label>
                            </div>
                            <div class="form-group row">
                                 <label class="col-form-label col-md-7 col-sm-7 label-align">Semana Anterior : </label>
                                  <label class="col-form-label col-md-4">{{infoHoras.semanaAnterior}} hrs.</label>
                            </div>
                        </div>
                 </div>  
          </div>
          <div class="col-md-9 col-sm-9">
                <div class="dashboard">
                    <div class="container">
                        <div class="row justify-content-center">
                            <div class="col-md-6 log<!--mx-auto-->">
                                <div class="log">
                                    <img src="contenido/images/logo2.png" class="img-log" alt="" />  
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
          </div>
      </div>
</body>
<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script>
 {{#if verToask }}
    <!--INFORMACIÓN-->
    
        if ("{{verToask.tipo}}" == "Editar") {
            toastr.warning('{{verToask.body}}', '{{verToask.titulo}}', {
                "progressBar": true
            });
        }
        else if ("{{verToask.tipo}}" == "Crear") {
            toastr.success('{{verToask.body}}', '{{verToask.titulo}}', {
                "progressBar": true
            });
        }
        else if ("{{verToask.tipo}}" == "Eliminar") {
            toastr.error('{{verToask.body}}', '{{verToask.titulo}}', {
                "progressBar": true
            });
        }
    {{/if}}

    const paddockManagers = [
    { id: 1, taxNumber: '132254524', name: 'JUAN TAPIA BURGOS'},
    { id: 2, taxNumber: '143618668', name: 'EFRAIN SOTO VERA'},
    { id: 3, taxNumber: '78903228', name: 'CARLOS PEREZ GONZALEZ'},
    { id: 4, taxNumber: '176812737', name: 'ANDRES VIÑALES CIENFUEGOS'},
    { id: 5, taxNumber: '216352696', name: 'OSCAR PEREZ ZUÑIGA'},
    { id: 6, taxNumber: '78684747', name: 'JOAQUIN ANDRADE SANDOVAL' }
    ];

    const paddockType = [
    { id: 1, name: 'PALTOS' },
    { id: 2, name: 'AVELLANOS' },
    { id: 3, name: 'CEREZAS' },
    { id: 4, name: 'NOGALES' },
    ];

    const paddocks = [
    { paddockManagerId: 6, farmId: 1, paddockTypeId: 1, harvestYear: 2019, area: 1200 },
    { paddockManagerId: 1, farmId: 3, paddockTypeId: 4, harvestYear: 2019, area: 500 },
    { paddockManagerId: 5, farmId: 3, paddockTypeId: 2, harvestYear: 2020, area: 20000 },
    { paddockManagerId: 2, farmId: 2, paddockTypeId: 3, harvestYear: 2021, area: 8401},
    { paddockManagerId: 3, farmId: 1, paddockTypeId: 1, harvestYear: 2020, area: 2877 },
    { paddockManagerId: 5, farmId: 2, paddockTypeId: 2, harvestYear: 2017, area: 15902 },
    { paddockManagerId: 3, farmId: 3, paddockTypeId: 2, harvestYear: 2018, area: 1736 },
    { paddockManagerId: 2, farmId: 3, paddockTypeId: 3, harvestYear: 2020, area: 2965 },
    { paddockManagerId: 4, farmId: 3, paddockTypeId: 4, harvestYear: 2018, area: 1651 },
    { paddockManagerId: 5, farmId: 1, paddockTypeId: 1, harvestYear: 2018, area: 700 },
    { paddockManagerId: 1, farmId: 2, paddockTypeId: 1, harvestYear: 2019, area: 7956 },
    { paddockManagerId: 5, farmId: 3, paddockTypeId: 2, harvestYear: 2020, area: 3745 },
    { paddockManagerId: 6, farmId: 1, paddockTypeId: 3, harvestYear: 2021, area: 11362 },
    { paddockManagerId: 2, farmId: 3, paddockTypeId: 3, harvestYear: 2021, area: 300 },
    { paddockManagerId: 3, farmId: 2, paddockTypeId: 2, harvestYear: 2020, area: 19188 },
    { paddockManagerId: 3, farmId: 1, paddockTypeId: 1, harvestYear: 2019, area: 17137 },
    { paddockManagerId: 4, farmId: 3, paddockTypeId: 2, harvestYear: 2020, area: 100 },
    { paddockManagerId: 2, farmId: 1, paddockTypeId: 3, harvestYear: 2019, area: 11845 },
    { paddockManagerId: 5, farmId: 2, paddockTypeId: 1, harvestYear: 2018, area: 15969 },
    { paddockManagerId: 1, farmId: 3, paddockTypeId: 1, harvestYear: 2029, area: 10420 },
    { paddockManagerId: 5, farmId: 2, paddockTypeId: 3, harvestYear: 2010, area: 3200 },
    { paddockManagerId: 6, farmId: 1, paddockTypeId: 2, harvestYear: 2012, area: 10587 },
    { paddockManagerId: 2, farmId: 2, paddockTypeId: 2, harvestYear: 2018, area: 16750 }
    ];

    const farms = [
    { id: 1, name: 'AGRICOLA SANTA ANA' },
    { id: 2, name: 'VINA SANTA PAULA' },
    { id: 3, name: 'FORESTAL Y AGRICOLA LO ENCINA' }
    ];

    //console.log(listPaddockManagersByName()); V1
    //console.log(sortPaddockTypeByTotalArea()); // v2
    //console.log(sortFarmManagerByAdminArea()); // v3
    // console.log(farmManagerNames()); // v4
    //console.log(biggestAvocadoFarms()); // v5
    //console.log(biggestCherriesManagers()); //v6
    //console.log(farmManagerPaddocks()); // v7
    console.log(paddocksManagers()); // v8 ***
    //console.log(newManagerRanking());
// V0

function listPaddockManagerIds() {
  return paddockManagers.map((paddockManager) => paddockManager.id);
};

function listPaddockManagersByName() {
    
return paddockManagers.sort(function(a, b){
                            let nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase();
                            if (nameA < nameB)
                            return -1;
                            if (nameA > nameB)
                            return 1;
                            return 0; 
                            })
                       .map((paddockManager) => paddockManager.taxNumber);
                       

};

function sortPaddockTypeByTotalArea() {
        let map = paddocks.reduce((prev, next) =>{
        if (next.paddockTypeId in prev) {
            prev[next.paddockTypeId].area += next.area;
        } else {
            prev[next.paddockTypeId] = next;
        }
        return prev;
        }, {});

    let resultGroup = Object.keys(map).map(paddockTypeId => map[paddockTypeId]); // Agrupados por area.

    let resultOrder = resultGroup.sort(function(a, b){return  b.area - a.area  }); // Ordenador DEC

    let resultType = resultOrder.map((paddock) => paddock.paddockTypeId); // Obtengo los nombre de los types

    let result = [];
    // Busco el nombre de los type.

    for (var i = 0, len = resultType.length; i < len; i++) { 
        
        let name = paddockType.find(ptype => ptype.id === resultType[i]).name;
        result.push(name);
    }

    return result;

}

function sortFarmManagerByAdminArea() {
  
     let map = paddocks.reduce((prev, next) =>{
        if (next.paddockManagerId in prev) {
            prev[next.paddockManagerId].area += next.area;
        } else {
            prev[next.paddockManagerId] = next;
        }
        return prev;
        }, {});

    let resultGroup = Object.keys(map).map(paddockManagerId => map[paddockManagerId]); // Agrupados por area.

    let resultOrder = resultGroup.sort(function(a, b){return  b.area - a.area  }); // Ordenador DEC

    let resultType = resultOrder.map((paddock) => paddock.paddockManagerId); // Obtengo los nombre de los types

    let result = [];
    // Busco el nombre de los type.
    
    for (var i = 0, len = resultType.length; i < len; i++) { 
        
        let name = paddockManagers.find(pManager => pManager.id === resultType[i]).name;
        result.push(name);
    }

    return result;

}

function farmManagerNames(){

    let campos  = farms.sort(function(a, b){
                            let nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase();
                            if (nameA < nameB)
                            return -1;
                            if (nameA > nameB)
                            return 1;
                            return 0; 
                            });

    var objs = [];

    campos.forEach(function(campo, idx) {  
            let adminByFarmId = paddocks.filter(paddock => paddock.farmId === campo.id); // Filtrados
                adminByFarmId = [...new Set(adminByFarmId.map(admPorCuartel => admPorCuartel.paddockManagerId))]; // Quito los duplicados.

                adminByFarmId  = paddockManagers.filter( paddockManager => adminByFarmId.includes( paddockManager.id ) ); // Obtener el listado PM

                adminByFarmId  = adminByFarmId.sort(function(a, b){
                                            let nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase();
                                            if (nameA < nameB)
                                            return -1;
                                            if (nameA > nameB)
                                            return 1;
                                            return 0; 
                                            }); // Ordenados
            
                adminByFarmId =  adminByFarmId.map((paddockManager) => paddockManager.taxNumber);

                 objs[campo.name] = adminByFarmId;
            
        });

    return objs;

}

// 5 Arreglo ordenado decrecientemente con los m2 totales de cada campo que tengan más de 2 hectáreas en Paltos
function biggestAvocadoFarms() {


let filterPaltosHectarea = paddocks.filter(function(paddock){
                                        return paddock.paddockTypeId === 1;
                             }); // filtro por paltos

 let filterFarms =    filterPaltosHectarea.reduce((prev, next) =>{
                                    if (next.farmId in prev) {
                                        prev[next.farmId].area += next.area;
                                    } else {
                                        prev[next.farmId] = next;
                                    }
                                    return prev;
                                    }, {}); // Sumo por Farms

const fFarms = Object.values(filterFarms); // casteo para ocupar filter.

let infoByFarm = fFarms.filter(function(paddock){
                                        return paddock.area > 20000;
                             }); // > 20000

let resultOrder = infoByFarm.sort(function(a, b){return  b.area - a.area  }); // Ordenador DEC

return resultOrder;

}

// 6 Arreglo con nombres de los administradores de la FORESTAL Y AGRÍCOLA LO ENCINA, ordenados por nombre, que trabajen más de 1000 m2 de Cerezas
function biggestCherriesManagers() {


let filterPaddocks = paddocks.filter(function(paddock){
                                        return (paddock.farmId === 3 && paddock.paddockTypeId === 3 && paddock.area > 1000);
                             }); // filtro por todos los con ID 3 FORESTAL Y AGRICOLA LO ENCINA

let result = [];
    
    for (var i = 0, len = filterPaddocks.length; i < len; i++) { 
        
        let nombre = paddockManagers.find(pManager => pManager.id === filterPaddocks[i].paddockManagerId).name;
        result.push(nombre);
    }


return result.sort(function(a, b){
                                            let nameA = a.toLowerCase(), nameB = b.toLowerCase();
                                            if (nameA < nameB)
                                            return -1;
                                            if (nameA > nameB)
                                            return 1;
                                            return 0; 
                                            });

}


// 7 Objeto en el cual las claves sean el nombre del administrador y el valor un arreglo con los nombres de los campos que administra,
// ordenados alfabéticamente
function farmManagerPaddocks() {
  // CODE HERE

  let objs = [];
  paddockManagers.filter(function(pManager){
                

                    let filterPaddocks = paddocks.filter(function(paddock){
                                        return (paddock.paddockManagerId === pManager.id );
                             });


                     let filterFarms =  filterPaddocks.reduce((prev, next) =>{
                                    if (next.farmId in prev) {
                                        prev[next.farmId].area += next.area;
                                    } else {
                                        prev[next.farmId] = next;
                                    }
                                    return prev;
                                    }, {});
                    
                    // buscar los nombres
                    const fFarms = Object.values(filterFarms);
                    let listadoFarmsAdms = [];
                    fFarms.filter(function(farm){
                                            //console.log(farm);
                                        let name = farms.find(frms => frms.id === farm.farmId).name;
                                        listadoFarmsAdms.push(name);
                                    }); 

                    objs[pManager.name] = listadoFarmsAdms.sort(function(a, b){
                                            let nameA = a.toLowerCase(), nameB = b.toLowerCase();
                                            if (nameA < nameB)
                                            return -1;
                                            if (nameA > nameB)
                                            return 1;
                                            return 0; 
                                            });


            });

  return objs;

}


// 8 Objeto en que las claves sean el tipo de cultivo concatenado con su año de plantación 
//(la concatenación tiene un separador de guión ‘-’, por ejemplo AVELLANOS-2020) y 
//el valor otro objeto en el cual la clave sea el id del administrador y el valor el nombre del administrador
// Luego devolver el lugar que ocupa este nuevo administrador en el ranking de la pregunta 3.
function paddocksManagers() {

  let objs = [];

    paddocks.forEach(function(paddock) {
            
            let filterPaddocks = paddocks.filter(function(fpaddock){
                                        return (paddock.harvestYear === fpaddock.harvestYear && paddock.paddockTypeId === fpaddock.paddockTypeId );
                             });

            let objs2 = [];

             filterPaddocks.forEach(function(fpaddock, idx) {
                    let nameAdms = paddockManagers.find(pManager => pManager.id === fpaddock.paddockManagerId).name;
                         objs2.push({id : fpaddock.paddockManagerId , name : nameAdms });
                    });                      
            
            let name = paddockType.find(ptype => ptype.id === paddock.paddockTypeId).name;
            
            objs[`${name}-${paddock.harvestYear}`] = objs2;

    });


return objs;

}


// 9 Agregar nuevo administrador con datos ficticios a "paddockManagers" y agregar un nuevo cuartel de tipo NOGALES con 900mts2, 
// año 2017 de AGRICOLA SANTA ANA, administrado por este nuevo administrador 
// Luego devolver el lugar que ocupa este nuevo administrador en el ranking de la pregunta 3.
// No modificar arreglos originales para no alterar las respuestas anteriores al correr la solución
function newManagerRanking() {

    let nombre = 'DAVID BENITES SEGURA';
    paddockManagers.push({
         id: 7, taxNumber: '166069130', name: nombre
    });

    paddocks.push({ paddockManagerId: 7, 
                    farmId: 1, 
                    paddockTypeId: 4, 
                    harvestYear: 2017, 
                    area: 900 });

    let ranking = sortFarmManagerByAdminArea();

    let ran = -1;
    ranking.forEach(function(name , idx) {

        if (name === nombre){
            ran = idx + 1;
        }
        


    });
    
    return ran;

}



</script>
    